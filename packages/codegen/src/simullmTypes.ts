// Auto-generated SimuLLM type definitions
// Generated on: 2025-08-14T15:24:48.321Z
// This file is auto-generated. Do not edit manually.

export const simullmTypes = `export interface Context<TGlobalState,TAction>{globalState:TGlobalState;dispatch:(action:TAction)=>void;updateGlobalState:(updater:(state:TGlobalState)=>TGlobalState)=>void;updateInternalState:(updater:(state:any)=>any)=>void;internalState:any;allAgents:Array<{id:string;internalState:any;}>;}export interface Agent<TGlobalState,TAction,TInternalState=any>{id:string;onAction:(action:TAction,context:Context<TGlobalState,TAction>)=>void | Promise<void>;initialInternalState?:TInternalState;}export interface ExitContext<TGlobalState,TAction>{globalState:TGlobalState;agentStates:{[agentId:string]:any;};lastAction:TAction;actionCount:number;}export interface SimulationConfig<TGlobalState,TAction>{initialGlobalState:TGlobalState;agents:Agent<TGlobalState,TAction,any>[];shouldExit:(context:ExitContext<TGlobalState,TAction>)=>boolean;}export interface ActionDispatcher<TGlobalState,TAction>{dispatch:(action:TAction)=>void | Promise<void>;getGlobalState:()=>TGlobalState;getAgentInternalState:(agentId:string)=>any;}export type{Agent,Context,SimulationConfig,ActionDispatcher,}from "./types";export{EventSimulation,createSimulation,createAgent}from "./simulation";import type{Agent,Context,SimulationConfig}from "./types";export declare class EventSimulation<TGlobalState,TAction>{private globalState;private agents;private agentInternalStates;private actionQueue;private isProcessing;private actionCount;private hasExited;private shouldExit;private exitPromise;private resolveExit;constructor(config:SimulationConfig<TGlobalState,TAction>);dispatch(action:TAction):Promise<void>;private processActionQueue;private createContext;getGlobalState():TGlobalState;getAgentInternalState(agentId:string):any;getAllAgentStates():{[agentId:string]:any;};getActionCount():number;hasSimulationExited():boolean;exit():Promise<void>;}export declare const createSimulation:<TGlobalState,TAction>(config:SimulationConfig<TGlobalState,TAction>)=>EventSimulation<TGlobalState,TAction>;export declare const createAgent:<TGlobalState,TAction,TInternalState=any>(id:string,onAction:(action:TAction,context:Context<TGlobalState,TAction>)=>void | Promise<void>,initialInternalState?:TInternalState)=>Agent<TGlobalState,TAction,TInternalState>;`;
